
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 22 20:32:01 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 22 20:32:01 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\004" +
    "\000\002\005\003\000\002\006\012\000\002\006\011\000" +
    "\002\007\003\000\002\007\003\000\002\010\006\000\002" +
    "\010\004\000\002\011\003\000\002\011\003\000\002\012" +
    "\005\000\002\012\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\007\000\002\014" +
    "\011\000\002\015\006\000\002\016\005\000\002\017\004" +
    "\000\002\020\004\000\002\021\004\000\002\022\005\000" +
    "\002\022\003\000\002\023\006\000\002\023\003\000\002" +
    "\024\006\000\002\024\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\014\000\002\027\004\000\002\030\005" +
    "\000\002\030\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\035\005\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\006\000\002\035\003\000\002\035" +
    "\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\012\035\016\042\005\043\004\044\011\001" +
    "\002\000\004\014\ufff3\001\002\000\004\014\ufff4\001\002" +
    "\000\012\035\016\042\005\043\004\044\011\001\002\000" +
    "\012\035\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\004" +
    "\002\ufffe\001\002\000\004\014\ufff7\001\002\000\004\002" +
    "\207\001\002\000\004\014\167\001\002\000\004\002\001" +
    "\001\002\000\004\014\ufff8\001\002\000\036\003\043\004" +
    "\027\010\052\012\020\013\031\014\032\015\033\025\030" +
    "\034\050\042\005\043\004\046\023\047\026\050\042\001" +
    "\002\000\004\027\uffef\001\002\000\004\014\166\001\002" +
    "\000\022\005\uffd2\016\uffd2\026\uffd2\027\uffd2\036\uffd2\037" +
    "\uffd2\041\uffd2\045\uffd2\001\002\000\022\005\uffd4\016\uffd4" +
    "\026\uffd4\027\uffd4\036\067\037\uffd4\041\uffd4\045\uffd4\001" +
    "\002\000\016\003\063\014\032\015\033\025\030\047\026" +
    "\050\042\001\002\000\004\027\uffed\001\002\000\006\016" +
    "\163\037\065\001\002\000\046\005\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\036\uffbf\037\uffbf" +
    "\041\uffbf\045\uffbf\001\002\000\016\003\063\014\032\015" +
    "\033\025\030\047\026\050\042\001\002\000\016\003\063" +
    "\014\032\015\033\025\030\047\026\050\042\001\002\000" +
    "\016\003\063\014\032\015\033\025\030\047\026\050\042" +
    "\001\002\000\052\005\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\140\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\036\uffc1\037\uffc1\040" +
    "\137\041\uffc1\045\uffc1\001\002\000\046\005\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2" +
    "\037\uffc2\041\uffc2\045\uffc2\001\002\000\004\014\130\001" +
    "\002\000\036\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\027\uffea\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\036\uffc3\037\uffc3\001\002\000\004\027\uffe8\001\002" +
    "\000\046\005\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\036\uffc5\037\uffc5\041\uffc5\045\uffc5\001" +
    "\002\000\040\003\043\004\027\007\126\010\052\012\020" +
    "\013\031\014\032\015\033\025\030\034\050\042\005\043" +
    "\004\046\023\047\026\050\042\001\002\000\046\005\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\115\024" +
    "\114\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\036\uffc8\037\uffc8\041\uffc8\045\uffc8\001\002\000\046\005" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\036\uffbe\037\uffbe\041\uffbe\045\uffbe\001\002\000\036" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\027\uffe7\030\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd" +
    "\037\uffbd\001\002\000\004\027\ufff0\001\002\000\042\005" +
    "\uffcb\016\uffcb\017\102\020\103\021\105\022\110\026\uffcb" +
    "\027\uffcb\030\104\031\111\032\107\033\106\036\uffcb\037" +
    "\uffcb\041\uffcb\045\uffcb\001\002\000\004\027\uffe9\001\002" +
    "\000\004\027\uffec\001\002\000\004\025\071\001\002\000" +
    "\004\027\uffeb\001\002\000\036\003\043\004\027\010\052" +
    "\012\020\013\031\014\032\015\033\025\030\034\050\042" +
    "\005\043\004\046\023\047\026\050\042\001\002\000\004" +
    "\027\055\001\002\000\004\027\uffee\001\002\000\044\003" +
    "\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\025\ufff1\034\ufff1\042\ufff1\043" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\001\002\000\040\003\043" +
    "\004\027\010\052\011\057\012\020\013\031\014\032\015" +
    "\033\025\030\034\050\042\005\043\004\046\023\047\026" +
    "\050\042\001\002\000\016\003\063\014\032\015\033\025" +
    "\030\047\026\050\042\001\002\000\004\027\061\001\002" +
    "\000\044\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\025\ufff2\034\ufff2" +
    "\042\ufff2\043\ufff2\046\ufff2\047\ufff2\050\ufff2\001\002\000" +
    "\006\027\uffe4\037\065\001\002\000\046\005\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd" +
    "\037\uffbd\041\uffbd\045\uffbd\001\002\000\046\005\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036" +
    "\uffc3\037\uffc3\041\uffc3\045\uffc3\001\002\000\016\003\063" +
    "\014\032\015\033\025\030\047\026\050\042\001\002\000" +
    "\022\005\uffd5\016\uffd5\026\uffd5\027\uffd5\036\067\037\uffd5" +
    "\041\uffd5\045\uffd5\001\002\000\016\003\063\014\032\015" +
    "\033\025\030\047\026\050\042\001\002\000\022\005\uffd3" +
    "\016\uffd3\026\uffd3\027\uffd3\036\uffd3\037\uffd3\041\uffd3\045" +
    "\uffd3\001\002\000\016\003\063\014\032\015\033\025\030" +
    "\047\026\050\042\001\002\000\004\027\073\001\002\000" +
    "\016\003\063\014\032\015\033\025\030\047\026\050\042" +
    "\001\002\000\006\027\075\037\065\001\002\000\016\003" +
    "\063\014\032\015\033\025\030\047\026\050\042\001\002" +
    "\000\004\026\077\001\002\000\036\003\043\004\027\010" +
    "\052\012\020\013\031\014\032\015\033\025\030\034\050" +
    "\042\005\043\004\046\023\047\026\050\042\001\002\000" +
    "\040\003\043\004\027\007\101\010\052\012\020\013\031" +
    "\014\032\015\033\025\030\034\050\042\005\043\004\046" +
    "\023\047\026\050\042\001\002\000\004\027\uffd7\001\002" +
    "\000\016\003\063\014\032\015\033\025\030\047\026\050" +
    "\042\001\002\000\016\003\063\014\032\015\033\025\030" +
    "\047\026\050\042\001\002\000\016\003\063\014\032\015" +
    "\033\025\030\047\026\050\042\001\002\000\016\003\063" +
    "\014\032\015\033\025\030\047\026\050\042\001\002\000" +
    "\016\003\063\014\032\015\033\025\030\047\026\050\042" +
    "\001\002\000\016\003\063\014\032\015\033\025\030\047" +
    "\026\050\042\001\002\000\016\003\063\014\032\015\033" +
    "\025\030\047\026\050\042\001\002\000\016\003\063\014" +
    "\032\015\033\025\030\047\026\050\042\001\002\000\026" +
    "\005\uffce\016\uffce\021\105\022\110\026\uffce\027\uffce\036" +
    "\uffce\037\uffce\041\uffce\045\uffce\001\002\000\046\005\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\115\024" +
    "\114\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\036\uffc9\037\uffc9\041\uffc9\045\uffc9\001\002\000\016\003" +
    "\063\014\032\015\033\025\030\047\026\050\042\001\002" +
    "\000\016\003\063\014\032\015\033\025\030\047\026\050" +
    "\042\001\002\000\046\005\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\036\uffc7\037\uffc7\041\uffc7" +
    "\045\uffc7\001\002\000\046\005\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6\037\uffc6\041" +
    "\uffc6\045\uffc6\001\002\000\026\005\uffcd\016\uffcd\021\105" +
    "\022\110\026\uffcd\027\uffcd\036\uffcd\037\uffcd\041\uffcd\045" +
    "\uffcd\001\002\000\026\005\uffcc\016\uffcc\021\105\022\110" +
    "\026\uffcc\027\uffcc\036\uffcc\037\uffcc\041\uffcc\045\uffcc\001" +
    "\002\000\046\005\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\115\024\114\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\036\uffca\037\uffca\041\uffca\045\uffca" +
    "\001\002\000\026\005\uffcf\016\uffcf\021\105\022\110\026" +
    "\uffcf\027\uffcf\036\uffcf\037\uffcf\041\uffcf\045\uffcf\001\002" +
    "\000\026\005\uffd1\016\uffd1\021\105\022\110\026\uffd1\027" +
    "\uffd1\036\uffd1\037\uffd1\041\uffd1\045\uffd1\001\002\000\026" +
    "\005\uffd0\016\uffd0\021\105\022\110\026\uffd0\027\uffd0\036" +
    "\uffd0\037\uffd0\041\uffd0\045\uffd0\001\002\000\004\002\ufffd" +
    "\001\002\000\006\027\uffe0\045\135\001\002\000\010\027" +
    "\uffdc\040\132\045\uffdc\001\002\000\006\027\uffde\045\uffde" +
    "\001\002\000\004\015\133\001\002\000\004\041\134\001" +
    "\002\000\006\027\uffdd\045\uffdd\001\002\000\004\014\130" +
    "\001\002\000\006\027\uffdf\045\uffdf\001\002\000\016\003" +
    "\063\014\032\015\033\025\030\047\026\050\042\001\002" +
    "\000\020\003\063\014\032\015\033\025\030\026\143\047" +
    "\026\050\042\001\002\000\010\026\uffd8\037\065\045\uffd8" +
    "\001\002\000\006\026\145\045\144\001\002\000\046\005" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\036\uffda\037\uffda\041\uffda\045\uffda\001\002\000\016" +
    "\003\063\014\032\015\033\025\030\047\026\050\042\001" +
    "\002\000\046\005\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\041\uffdb\045\uffdb" +
    "\001\002\000\010\026\uffd9\037\065\045\uffd9\001\002\000" +
    "\006\037\065\041\150\001\002\000\046\005\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0" +
    "\037\uffc0\041\uffc0\045\uffc0\001\002\000\006\027\uffe1\037" +
    "\065\001\002\000\006\026\153\037\065\001\002\000\046" +
    "\005\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\036\uffc4\037\uffc4\041\uffc4\045\uffc4\001\002\000" +
    "\006\005\155\037\065\001\002\000\036\003\043\004\027" +
    "\010\052\012\020\013\031\014\032\015\033\025\030\034" +
    "\050\042\005\043\004\046\023\047\026\050\042\001\002" +
    "\000\042\003\043\004\027\006\157\007\160\010\052\012" +
    "\020\013\031\014\032\015\033\025\030\034\050\042\005" +
    "\043\004\046\023\047\026\050\042\001\002\000\036\003" +
    "\043\004\027\010\052\012\020\013\031\014\032\015\033" +
    "\025\030\034\050\042\005\043\004\046\023\047\026\050" +
    "\042\001\002\000\004\027\uffe6\001\002\000\040\003\043" +
    "\004\027\007\162\010\052\012\020\013\031\014\032\015" +
    "\033\025\030\034\050\042\005\043\004\046\023\047\026" +
    "\050\042\001\002\000\004\027\uffe5\001\002\000\016\003" +
    "\063\014\032\015\033\025\030\047\026\050\042\001\002" +
    "\000\010\026\uffe3\027\uffe3\037\065\001\002\000\006\027" +
    "\uffd6\037\065\001\002\000\004\027\uffe2\001\002\000\004" +
    "\025\170\001\002\000\010\026\173\042\005\043\004\001" +
    "\002\000\004\014\206\001\002\000\006\026\200\045\177" +
    "\001\002\000\004\035\174\001\002\000\036\003\043\004" +
    "\027\010\052\012\020\013\031\014\032\015\033\025\030" +
    "\034\050\042\005\043\004\046\023\047\026\050\042\001" +
    "\002\000\040\003\043\004\027\007\176\010\052\012\020" +
    "\013\031\014\032\015\033\025\030\034\050\042\005\043" +
    "\004\046\023\047\026\050\042\001\002\000\012\035\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\001\002\000\006\042\005\043" +
    "\004\001\002\000\004\035\201\001\002\000\036\003\043" +
    "\004\027\010\052\012\020\013\031\014\032\015\033\025" +
    "\030\034\050\042\005\043\004\046\023\047\026\050\042" +
    "\001\002\000\040\003\043\004\027\007\203\010\052\012" +
    "\020\013\031\014\032\015\033\025\030\034\050\042\005" +
    "\043\004\046\023\047\026\050\042\001\002\000\012\035" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002\000\004\014\205" +
    "\001\002\000\006\026\ufff6\045\ufff6\001\002\000\006\026" +
    "\ufff5\045\ufff5\001\002\000\004\002\000\001\002\000\004" +
    "\002\uffff\001\002\000\012\035\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\020\002\011\003\013\004\007\005\005\006" +
    "\006\007\012\011\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\207\006\210\007\012\011\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\011\033\012\037\013\052\014\043" +
    "\015\016\016\053\017\023\020\046\021\050\024\034\026" +
    "\045\027\035\030\024\031\021\032\020\033\044\034\040" +
    "\035\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\063\030\164" +
    "\031\021\032\020\033\044\034\040\035\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\063\030\153\031\021\032\020\033\044\034\040\035" +
    "\036\001\001\000\020\024\063\030\151\031\021\032\020" +
    "\033\044\034\040\035\036\001\001\000\020\024\063\030" +
    "\150\031\021\032\020\033\044\034\040\035\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\126\023" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\033\013\057\014\043\015\016\016" +
    "\053\017\023\020\046\021\050\024\034\026\045\027\035" +
    "\030\024\031\021\032\020\033\044\034\040\035\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\033\012\055\013\052\014\043\015\016\016\053\017" +
    "\023\020\046\021\050\024\034\026\045\027\035\030\024" +
    "\031\021\032\020\033\044\034\040\035\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\033\013\057\014\043\015\016\016\053\017\023\020" +
    "\046\021\050\024\034\026\045\027\035\030\024\031\021" +
    "\032\020\033\044\034\040\035\036\001\001\000\020\024" +
    "\063\030\061\031\021\032\020\033\044\034\040\035\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\024\063" +
    "\031\065\032\020\033\044\034\040\035\036\001\001\000" +
    "\002\001\001\000\014\024\063\032\067\033\044\034\040" +
    "\035\036\001\001\000\002\001\001\000\022\016\071\024" +
    "\063\030\024\031\021\032\020\033\044\034\040\035\036" +
    "\001\001\000\002\001\001\000\020\024\063\030\073\031" +
    "\021\032\020\033\044\034\040\035\036\001\001\000\002" +
    "\001\001\000\022\016\075\024\063\030\024\031\021\032" +
    "\020\033\044\034\040\035\036\001\001\000\002\001\001" +
    "\000\046\011\033\012\077\013\052\014\043\015\016\016" +
    "\053\017\023\020\046\021\050\024\034\026\045\027\035" +
    "\030\024\031\021\032\020\033\044\034\040\035\036\001" +
    "\001\000\044\011\033\013\057\014\043\015\016\016\053" +
    "\017\023\020\046\021\050\024\034\026\045\027\035\030" +
    "\024\031\021\032\020\033\044\034\040\035\036\001\001" +
    "\000\002\001\001\000\012\024\063\033\124\034\040\035" +
    "\036\001\001\000\012\024\063\033\123\034\040\035\036" +
    "\001\001\000\012\024\063\033\122\034\040\035\036\001" +
    "\001\000\010\024\063\034\121\035\036\001\001\000\012" +
    "\024\063\033\120\034\040\035\036\001\001\000\012\024" +
    "\063\033\117\034\040\035\036\001\001\000\010\024\063" +
    "\034\112\035\036\001\001\000\012\024\063\033\111\034" +
    "\040\035\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\063\035\116\001\001\000\006\024\063\035" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\135\001\001\000\002\001\001\000\020\024\063\030" +
    "\146\031\021\032\020\033\044\034\040\035\036\001\001" +
    "\000\022\024\063\025\141\030\140\031\021\032\020\033" +
    "\044\034\040\035\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\063\030\145\031" +
    "\021\032\020\033\044\034\040\035\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\011\033\012\155\013\052\014" +
    "\043\015\016\016\053\017\023\020\046\021\050\024\034" +
    "\026\045\027\035\030\024\031\021\032\020\033\044\034" +
    "\040\035\036\001\001\000\044\011\033\013\057\014\043" +
    "\015\016\016\053\017\023\020\046\021\050\024\034\026" +
    "\045\027\035\030\024\031\021\032\020\033\044\034\040" +
    "\035\036\001\001\000\046\011\033\012\160\013\052\014" +
    "\043\015\016\016\053\017\023\020\046\021\050\024\034" +
    "\026\045\027\035\030\024\031\021\032\020\033\044\034" +
    "\040\035\036\001\001\000\002\001\001\000\044\011\033" +
    "\013\057\014\043\015\016\016\053\017\023\020\046\021" +
    "\050\024\034\026\045\027\035\030\024\031\021\032\020" +
    "\033\044\034\040\035\036\001\001\000\002\001\001\000" +
    "\020\024\063\030\163\031\021\032\020\033\044\034\040" +
    "\035\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\171\011\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\033\012\174\013\052\014\043\015\016" +
    "\016\053\017\023\020\046\021\050\024\034\026\045\027" +
    "\035\030\024\031\021\032\020\033\044\034\040\035\036" +
    "\001\001\000\044\011\033\013\057\014\043\015\016\016" +
    "\053\017\023\020\046\021\050\024\034\026\045\027\035" +
    "\030\024\031\021\032\020\033\044\034\040\035\036\001" +
    "\001\000\002\001\001\000\004\011\203\001\001\000\002" +
    "\001\001\000\046\011\033\012\201\013\052\014\043\015" +
    "\016\016\053\017\023\020\046\021\050\024\034\026\045" +
    "\027\035\030\024\031\021\032\020\033\044\034\040\035" +
    "\036\001\001\000\044\011\033\013\057\014\043\015\016" +
    "\016\053\017\023\020\046\021\050\024\034\026\045\027" +
    "\035\030\024\031\021\032\020\033\044\034\040\035\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;        
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= error 
            {
              NodoBase RESULT =null;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29h");
                System.out.println("Error sintáctico. Línea " + (((Scanner)parser.getScanner()).getLine() - 1) + ".");
                System.exit(0);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29g");
                NodoValor nodo = new NodoValor(false, tipoVariable.booleano);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29f");
                NodoValor nodo = new NodoValor(true, tipoVariable.booleano);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= ID LSB exp RSB 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29e");
                NodoIdentificador nodo = new NodoIdentificador(id, ep);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= ID 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29d");
                NodoIdentificador nodo = new NodoIdentificador(id);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		Integer nm = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29c");
                NodoValor nodo = new NodoValor(nm, tipoVariable.entero);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= func_call 
            {
              NodoBase RESULT =null;
		NodoBase fc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29b");
                RESULT = fc;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 29a");
                RESULT = ep;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= factor 
            {
              NodoBase RESULT =null;
		NodoBase ft = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 28c");
                RESULT = ft;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		NodoBase tm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase ft = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 28b");
                NodoOperacion nodo = new NodoOperacion(tm, tipoOp.entre, ft);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		NodoBase tm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase ft = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 28a");
                NodoOperacion nodo = new NodoOperacion(tm, tipoOp.por, ft);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		NodoBase tm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 27c");
                    RESULT = tm;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase tm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 27b");
                    NodoOperacion nodo = new NodoOperacion(se, tipoOp.menos, tm);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase tm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 27a");
                    NodoOperacion nodo = new NodoOperacion(se, tipoOp.mas, tm);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cmp_exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26g");
                RESULT = se;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cmp_exp ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase se2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26f");
                NodoOperacion nodo = new NodoOperacion(se, tipoOp.menorigual, se2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cmp_exp ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase se2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26e");
                NodoOperacion nodo = new NodoOperacion(se, tipoOp.mayorigual, se2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cmp_exp ::= simple_exp NE simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase se2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26d");
                NodoOperacion nodo = new NodoOperacion(se, tipoOp.diferente, se2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cmp_exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase se2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26c");
                NodoOperacion nodo = new NodoOperacion(se, tipoOp.mayor, se2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cmp_exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase se2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26b");
                NodoOperacion nodo = new NodoOperacion(se, tipoOp.igual, se2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cmp_exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase se2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 26a");
                NodoOperacion nodo = new NodoOperacion(se, tipoOp.menor, se2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // log_exp ::= cmp_exp 
            {
              NodoBase RESULT =null;
		NodoBase ce = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 25b");
                RESULT = ce;                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_exp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // log_exp ::= log_exp AND cmp_exp 
            {
              NodoBase RESULT =null;
		NodoBase le = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase ce = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 25a");
                NodoOperacion nodo = new NodoOperacion(le, tipoOp.ylogico, ce);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_exp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= log_exp 
            {
              NodoBase RESULT =null;
		NodoBase le = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(modoDepuracion)
                    System.out.println("\t regla 24b");
            RESULT = le;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp OR log_exp 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase le = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(modoDepuracion)
                System.out.println("\t regla 24a");
            NodoOperacion nodo = new NodoOperacion(ep, tipoOp.ologico, le);
            ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return_stmt ::= RETURN exp 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 23");
                NodoReturn nodo = new NodoReturn(ep);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		NodoBase as = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		NodoBase as2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 22");
                NodoFor nodo = new NodoFor(as, ep, as2, ss);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // call_args ::= exp 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 21b");
                    RESULT = ep;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_args",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // call_args ::= call_args COMMA exp 
            {
              NodoBase RESULT =null;
		NodoBase ca = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 21a");
                    NodoBase nodoActual = ca;
                    if(nodoActual != null)
                    {
                        while(nodoActual.TieneHermano())
                        {
                            nodoActual = nodoActual.getHermanoDerecha();
                        }
                        nodoActual.setHermanoDerecha(ep);
                        RESULT = ca;
                    }
                    else
                    {
                        RESULT = ep;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_args",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // func_call ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 20b");
                    NodoLlamada nodo = new NodoLlamada(id);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // func_call ::= ID LPAREN call_args RPAREN 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		NodoBase ca = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 20a");
                    NodoLlamada nodo = new NodoLlamada(id, ca);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl_name ::= ID 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 19b");
                    NodoVariable nodo = new NodoVariable(id);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_name",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decl_name ::= ID LSB NUM RSB 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Integer nm = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 19a");
                    NodoVariable nodo = new NodoVariable(id, nm);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_name",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decl_var ::= decl_name 
            {
              NodoBase RESULT =null;
		NodoBase dn = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 18");
                    RESULT = dn;
                    if(dn == null)
                    {
                        RESULT = null;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // decl_var ::= decl_var COMMA decl_name 
            {
              NodoBase RESULT =null;
		NodoBase dv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase dn = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 17");
                    NodoBase nodoActual = dv;
                    if(dv != null)
                    {
                        while(nodoActual.TieneHermano())
                        {
                            nodoActual = nodoActual.getHermanoDerecha();
                        }
                        nodoActual.setHermanoDerecha(dn);
                        RESULT = dv;
                    }
                    else
                    {
                        RESULT = dn;
                    }                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decl_stmt ::= var_type decl_var 
            {
              NodoBase RESULT =null;
		tipoVariable vt = (tipoVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoBase dv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 16");
                NodoDeclaracion nodo = new NodoDeclaracion(dv, vt);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 15");
                NodoEscribir nodo = new NodoEscribir(ep);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 14");
                NodoLeer nodo = new NodoLeer(id);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assign_stmt ::= exp ASSIGN exp 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase ep2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (!(ep instanceof NodoIdentificador))
                {
                    System.out.println("Error sintáctico en la línea " + ((Scanner)parser.getScanner()).getLine() + ".");
                    System.exit(0);
                }
                if(modoDepuracion)
                    System.out.println("\t regla 13");
                NodoAsignacion nodo = new NodoAsignacion(ep, ep2);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 12");
                NodoRepeat nodo = new NodoRepeat(ss, ep);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		NodoBase ss2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 11b");
                    NodoIf nodo = new NodoIf(ep, ss, ss2);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		NodoBase ep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                    
                    if(modoDepuracion)
                        System.out.println("\t regla 11a");
                    NodoIf nodo = new NodoIf(ep, ss);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= error 
            {
              NodoBase RESULT =null;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10j");
                System.out.println("Error sintáctico. Línea " + (((Scanner)parser.getScanner()).getLine() - 1) + ".");
                System.exit(0);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= return_stmt 
            {
              NodoBase RESULT =null;
		NodoBase rs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10i");                
                RESULT = rs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		NodoBase fs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10h");                
                RESULT = fs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= func_call 
            {
              NodoBase RESULT =null;
		NodoBase fc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10g");                
                RESULT = fc;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= decl_stmt 
            {
              NodoBase RESULT =null;
		NodoBase ds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10f");                
                RESULT = ds;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		NodoBase ws = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10e");                
                RESULT = ws;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		NodoBase rs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10d");                
                RESULT = rs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		NodoBase as = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10c");                
                RESULT = as;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		NodoBase rs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10b");                
                RESULT = rs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		NodoBase is = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(modoDepuracion)
                        System.out.println("\t regla 10a");                
                RESULT = is;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_seq ::= stmt SEMI 
            {
              NodoBase RESULT =null;
		NodoBase sm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 9b");
                    RESULT = sm;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_seq ::= stmt_seq stmt SEMI 
            {
              NodoBase RESULT =null;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		NodoBase sm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 9a");
                    NodoBase nodoActual = ss;
                    if(nodoActual != null)
                    {
                        while(nodoActual.TieneHermano())
                        {
                            nodoActual = nodoActual.getHermanoDerecha();
                        }
                        nodoActual.setHermanoDerecha(sm);
                        RESULT = ss;
                    }
                    else
                    {
                        RESULT = sm;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_type ::= INT 
            {
              tipoVariable RESULT =null;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 8b");
                    RESULT = tipoVariable.entero;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_type ::= BOOL 
            {
              tipoVariable RESULT =null;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 8a");
                    RESULT = tipoVariable.booleano;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_args ::= var_type ID 
            {
              NodoBase RESULT =null;
		tipoVariable vt = (tipoVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 7b");
                    NodoDeclaracion  nodo = new NodoDeclaracion(new NodoVariable(id), vt);
                    ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_args",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_args ::= func_args COMMA var_type ID 
            {
              NodoBase RESULT =null;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		tipoVariable vt = (tipoVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 7a");
                    NodoBase nodoActual = fa;
                    NodoDeclaracion nodoSiguiente = new NodoDeclaracion(new NodoVariable(id), vt);
                    if(nodoActual != null)
                    {
                        while(nodoActual.TieneHermano())
                        {
                            nodoActual = nodoActual.getHermanoDerecha();
                        }                        
                        nodoActual.setHermanoDerecha(nodoSiguiente);
                        RESULT = fa;
                    }
                    else
                    {
                        RESULT = nodoSiguiente;
                    }                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_args",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_type ::= VOID 
            {
              tipoVariable RESULT =null;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 6b");
                    RESULT = tipoVariable.vacio;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_type",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_type ::= var_type 
            {
              tipoVariable RESULT =null;
		tipoVariable vt = (tipoVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 6a");
                    RESULT = vt;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_type",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func ::= func_type ID LPAREN RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		tipoVariable ft = (tipoVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 5b");
                NodoFuncion nodo = new NodoFuncion(ft, ss, id);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func ::= func_type ID LPAREN func_args RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		tipoVariable ft = (tipoVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(modoDepuracion)
                    System.out.println("\t regla 5a");
                NodoFuncion nodo = new NodoFuncion(ft, ss, fa, id);
                ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcs_seq ::= func 
            {
              NodoBase RESULT =null;
		NodoBase ft = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 4b");
                    RESULT = ft;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcs_seq",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcs_seq ::= funcs_seq func 
            {
              NodoBase RESULT =null;
		NodoBase fs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoBase ft = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 4a");
                    NodoBase nodoActual = fs;
                    if(nodoActual != null)
                    {
                        while(nodoActual.TieneHermano())
                        {
                            nodoActual = nodoActual.getHermanoDerecha();
                        }
                        nodoActual.setHermanoDerecha(ft);
                        RESULT = fs;
                    }
                    else
                    {
                        RESULT = ft;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcs_seq",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_program ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		NodoBase ss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(modoDepuracion)
                            System.out.println("\t regla 3");
                        NodoFuncion nodo = new NodoFuncion(ss);
                        ((NodoBase) nodo).setNumeroLinea(((Scanner)parser.getScanner()).getLine());
                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_program",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_struct ::= main_program 
            {
              NodoBase RESULT =null;
		NodoBase mp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(modoDepuracion)
                            System.out.println("\t regla 2b");
                        RESULT = mp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_struct",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_struct ::= funcs_seq main_program 
            {
              NodoBase RESULT =null;
		NodoBase fs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoBase mp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(modoDepuracion)
                            System.out.println("\t regla 2a");
                        NodoBase nodoActual = fs;
                        if(nodoActual != null)
                        {
                            while(nodoActual.TieneHermano())
                            {
                                nodoActual = nodoActual.getHermanoDerecha();
                            }
                            nodoActual.setHermanoDerecha(mp);
                            RESULT = fs;
                        }    
                        else
                        {
                            RESULT = mp;
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_struct",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program_struct 
            {
              Object RESULT =null;
		NodoBase ps = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(modoDepuracion)
                        System.out.println("\t regla 1"); 
                    ast = ps;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

